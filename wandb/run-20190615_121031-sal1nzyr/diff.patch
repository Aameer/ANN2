diff --git a/keras_dropout.py b/keras_dropout.py
index 801df39..8be9e14 100644
--- a/keras_dropout.py
+++ b/keras_dropout.py
@@ -15,6 +15,7 @@ config.optimizer = "adam"
 config.epochs = 50
 config.dropout = 0.4
 config.hidden_nodes = 100
+config.batch_size=64
 
 # load data
 (X_train, y_train), (X_test, y_test) = mnist.load_data()
@@ -45,5 +46,5 @@ model.compile(loss='categorical_crossentropy', optimizer=config.optimizer,
 
 
 # Fit the model
-model.fit(X_train, y_train, validation_data=(X_test, y_test),
+model.fit(X_train, y_train, validation_data=(X_test, y_test), batch_size=config.batch_size,
         epochs=config.epochs, callbacks=[WandbCallback(data_type="image", labels=labels)])
diff --git a/keras_perceptron.py b/keras_perceptron.py
index 71abdcd..a846948 100644
--- a/keras_perceptron.py
+++ b/keras_perceptron.py
@@ -5,6 +5,7 @@ from keras.models import Sequential
 from keras.layers import Dense, Flatten, Dropout
 from keras.utils import np_utils
 from keras.callbacks import Callback
+from keras.optimizers import Adam
 import json
 
 from wandb.keras import WandbCallback
@@ -13,8 +14,11 @@ import wandb
 run = wandb.init()
 config = run.config
 config.optimizer = "adam"
-config.epochs = 10
-config.hidden_nodes = 100
+#config.lr= 1e-3
+#optimizer = Adam(lr=config.lr)
+config.epochs = 20
+config.hidden_nodes = 50
+config.batch_size=64
 
 # load data
 (X_train, y_train), (X_test, y_test) = mnist.load_data()
@@ -40,11 +44,16 @@ num_classes = y_train.shape[1]
 model = Sequential()
 model.add(Flatten(input_shape=(img_width, img_height)))
 model.add(Dense(config.hidden_nodes, activation='relu'))
+model.add(Dense(config.hidden_nodes, activation='relu'))
+model.add(Dense(config.hidden_nodes, activation='relu'))
 model.add(Dense(num_classes, activation='softmax'))
 model.compile(loss='categorical_crossentropy', optimizer=config.optimizer,
               metrics=['accuracy'])
+#model.compile(loss='categorical_crossentropy', optimizer=optimizer,
+#              metrics=['accuracy'])
+
 model.summary()
 # Fit the model
-model.fit(X_train, y_train, validation_data=(X_test, y_test),
+model.fit(X_train, y_train, validation_data=(X_test, y_test),batch_size=config.batch_size,
           epochs=config.epochs,
           callbacks=[WandbCallback(data_type="image", labels=labels)])
